name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ "main" ]
    paths-ignore: [ "README.md", "LICENSE", "docs/**" ]

  push:
    branches: [ "main" ]
    paths-ignore: [ "README.md", "LICENSE", "docs/**" ]


jobs:
  linter:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      # Run all pre-commit hooks on all the files.
      # Getting only staged files can be tricky in case a new PR is opened
      # since the action is run on a branch in detached head state
      - name: Install and Run Pre-commit
        uses: pre-commit/action@v2.0.0

  {%- if cookiecutter.use_docker == 'y' %}

  test-local:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Install mkcert
        run: |
          sudo apt install libnss3-tools
          wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          sudo mv mkcert-* /usr/local/bin/mkcert
          chmod +x /usr/local/bin/mkcert

      - name: Create  CA
        run: make install-certs

      - name: Build the Stack
        run: make build-local

      - name: Run Django Tests
        run: make test-local

  test-functional:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Install mkcert
        run: |
          sudo apt install libnss3-tools
          wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
          sudo mv mkcert-* /usr/local/bin/mkcert
          chmod +x /usr/local/bin/mkcert

      - name: Create  CA
        run: make install-certs

      - name: Set read/write permissions for Docker volumes
        run: chmod -R 0777 .

      - name: Build the client
        run: make build-client

      - name: Build the stack
        run: make build-staging

      - name: Run migrations
        run: make staging-migrate

      - name: Collect staticfiles
        run: make staging-collectstatic

      - name: Run Django Tests
        run: make test-f
  {%- else %}

  pytest:
    runs-on: ubuntu-latest

    services:
      {%- if cookiecutter.use_celery == 'y' %}
      redis:
        image: redis:5.0
        ports:
          - 6379:6379
      {%- endif %}
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: postgres

    env:
      {%- if cookiecutter.use_celery == 'y' %}
      CELERY_BROKER_URL: "redis://localhost:6379/0"
      {%- endif %}
      # postgres://user:password@host:port/database
      DATABASE_URL: "postgres://postgres:postgres@localhost:5432/postgres"

    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Get pip cache dir
        id: pip-cache-location
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      {%- raw %}

      - name: Cache pip Project Dependencies
        uses: actions/cache@v2
        with:
          # Get the location of pip cache dir
          path: ${{ steps.pip-cache-location.outputs.dir }}
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('**/local.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      {%- endraw %}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/local.txt

      - name: Test with pytest
        run:  pytest
  {%- endif %}
